<?php

/**
 * peanutItemTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
abstract class PluginpeanutItemTable extends Doctrine_Table
{
  /**
   * Returns an instance of this class.
   *
   * @return object peanutItemTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('peanutItem');
  }

  /**
   * Retrieves item object.
   *
   * @param  string     $type     The type of item
   *
   * @return peanutItem
   */
  public function getItem($lang = null, $type = null)
  {
    $p = $this->createQuery('p')
            ->leftJoin('p.Translation t')
            ->leftJoin('p.sfGuardUser s')
            ->leftJoin('p.peanutMenu m')
            ->select('p.id, p.type, p.menu, p.author, p.status, p.url, p.relation, p.created_at, p.updated_at, p.position, p.seo_id')
            ->addSelect('t.title, t.content, t.excerpt, t.lang, t.slug')
            ->addSelect('s.id, s.first_name, s.last_name, s.email_address, s.username')
            ->addSelect('m.id, m.name, m.slug')
            ->orderBy('p.position ASC');

    if(null !== $lang)
    {
      $p->andWhere('t.lang = ?', $lang);
    }
    
    if(null !== $type)
    {
      $p->andWhere('p.type = ?', $type);
    }
    
    return $p;
  }

  /**
   * Retrieves item object.
   *
   * @param  string|int $item     The id or slug of item
   * @param  string     $type     The type of item
   *
   * @return peanutItem
   */
  public function showItem($item, $lang = null, $type = null)
  {
    $p = $this->getItem($lang, $type)
            ->leftJoin('p.peanutSeo o')
            ->andWhere('p.id = ? OR t.slug = ?', array($item, $item));

    return $p;
  }

  /**
   * Retrieves items object.
   *
   * @param  string     $status   The status of the item
   * @param  string     $type     The type of item
   *
   * @return peanutItem
   */
  public function getItems($status = 'publish', $lang = null, $type = null)
  {
    $p = $this->getItem($lang, $type)
            ->andWhere('p.status = ?', $status);

    return $p;
  }

  /**
   * Retrieves items object by menu.
   *
   * @param  string|int $menu     The id or slug of menu
   * @param  string     $status   The status of items
   * @param  string     $type     The type of item
   *
   * @return peanutItem
   */
  public function getItemsByMenu($menu, $status = 'publish', $lang = null, $type = null)
  {
    $p = $this->getItems($status, $lang, $type)
            ->andWhere('m.id = ? OR m.slug = ?', array($menu, $menu));
    
    return $p;
  }

  /**
   * Retrieves items object by author.
   *
   * @param  string|int $author   The id or username of author
   * @param  string     $status   The status of items
   * @param  string     $type     The type of item
   *
   * @return peanutItem
   */
  public function getItemsByAuthor($author, $status = 'publish', $lang = null, $type = null)
  {
    $p = $this->getItems($status, $lang, $type)
            ->andWhere('s.id = ? OR s.username = ?', array($author, $author));
    
    return $p;
  }

}